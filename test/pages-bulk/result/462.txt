URL: http://www.gnu.org/gnu/manifesto.html


  <h>The GNU Manifesto

     <p>The GNU Manifesto (which appears below) was written by     Richard Stallma
n at the beginning of the GNU Project, to ask for     participation and support
.  For the first few years, it was     updated in minor ways to account for dev
elopments, but now it     seems best to leave it unchanged as most people have
seen it.     <p>Since that time, we have learned about certain common     misunder
standings that different wording could help avoid.     Footnotes added in 1993
help clarify these points.     For up-to-date information about the available G
NU software,     please see the information available on     our web server, in
 particular     our list of software.  For     how to contribute, see http://ww
w.gnu.org/help.

  <h>What's GNU? Gnu's Not Unix!

     _________________________________________________________________

   <p>GNU, which stands for Gnu's Not Unix, is the name for the
   completeUnix-compatible software system which I am writing so that I
   can giveit away free to everyone who can use it. (1) Several other
   volunteers are helping me.Contributions of time, money, programs and
   equipment are greatlyneeded.

   <p>So far we have an Emacs text editor with Lisp for writing
   editorcommands, a source level debugger, a yacc-compatible parser
   generator,a linker, and around 35 utilities. A shell (command
   interpreter) isnearly completed. A new portable optimizing C compiler
   has compileditself and may be released this year. An initial kernel
   exists butmany more features are needed to emulate Unix. When the
   kernel andcompiler are finished, it will be possible to distribute a
   GNU systemsuitable for program development. We will use TeX as our
   textformatter, but an nroff is being worked on. We will use the
   free,portable X window system as well. After this we will add a
   portableCommon Lisp, an Empire game, a spreadsheet, and hundreds of
   otherthings, plus on-line documentation. We hope to supply,
   eventually,everything useful that normally comes with a Unix system,
   and more.

   <p>GNU will be able to run Unix programs, but will not be identical
   toUnix. We will make all improvements that are convenient, based on
   ourexperience with other operating systems. In particular, we plan
   tohave longer file names, file version numbers, a crashproof file
   system,file name completion perhaps, terminal-independent display
   support, andperhaps eventually a Lisp-based window system through
   which severalLisp programs and ordinary Unix programs can share a
   screen. Both Cand Lisp will be available as system programming
   languages. We willtry to support UUCP, MIT Chaosnet, and Internet
   protocols forcommunication.

   <p>GNU is aimed initially at machines in the 68000/16000 class
   withvirtual memory, because they are the easiest machines to make it
   runon. The extra effort to make it run on smaller machines will be
   leftto someone who wants to use it on them.

   <p>To avoid horrible confusion, please pronounce the `G' in the word`GNU'
   when it is the name of this project.

  <h>Why I Must Write GNU

   <p>I consider that the golden rule requires that if I like a program
   Imust share it with other people who like it. Software sellers want
   todivide the users and conquer them, making each user agree not to
   sharewith others. I refuse to break solidarity with other users in
   thisway. I cannot in good conscience sign a nondisclosure agreement or
   asoftware license agreement. For years I worked within the
   ArtificialIntelligence Lab to resist such tendencies and other
   inhospitalities,but eventually they had gone too far: I could not
   remain in aninstitution where such things are done for me against my
   will.

   <p>So that I can continue to use computers without dishonor, I
   havedecided to put together a sufficient body of free software so that
   Iwill be able to get along without any software that is not free.
   Ihave resigned from the AI lab to deny MIT any legal excuse to
   preventme from giving GNU away.

  <h>Why GNU Will Be Compatible with Unix

   <p>Unix is not my ideal system, but it is not too bad. The
   essentialfeatures of Unix seem to be good ones, and I think I can fill
   in whatUnix lacks without spoiling them. And a system compatible with
   Unixwould be convenient for many other people to adopt.

  <h>How GNU Will Be Available

   <p>GNU is not in the public domain. Everyone will be permitted tomodify
   and redistribute GNU, but no distributor will be allowed torestrict
   its further redistribution. That is to say,proprietary modifications
   will not be allowed. I want tomake sure that all versions of GNU
   remain free.

  <h>Why Many Other Programmers Want to Help

   <p>I have found many other programmers who are excited about GNU andwant
   to help.

   <p>Many programmers are unhappy about the commercialization of
   systemsoftware. It may enable them to make more money, but it requires
   themto feel in conflict with other programmers in general rather than
   feelas comrades. The fundamental act of friendship among programmers
   is thesharing of programs; marketing arrangements now typically
   usedessentially forbid programmers to treat others as friends.
   Thepurchaser of software must choose between friendship and obeying
   thelaw. Naturally, many decide that friendship is more important.
   Butthose who believe in law often do not feel at ease with either
   choice.They become cynical and think that programming is just a way of
   makingmoney.

   <p>By working on and using GNU rather than proprietary programs, we canbe
   hospitable to everyone and obey the law. In addition, GNU serves asan
   example to inspire and a banner to rally others to join us insharing.
   This can give us a feeling of harmony which is impossible ifwe use
   software that is not free. For about half the programmers Italk to,
   this is an important happiness that money cannot replace.

  <h>How You Can Contribute

     <p>(Nowadays, for software tasks to work on, seethe GNU tasklist. For
     other ways to contribute,see http://www.gnu.org/help.)

   <p>I am asking computer manufacturers for donations of machines andmoney.
   I'm asking individuals for donations of programs and work.

   <p>One consequence you can expect if you donate machines is that GNUwill
   run on them at an early date. The machines should be complete,ready to
   use systems, approved for use in a residential area, and notin need of
   sophisticated cooling or power.

   <p>I have found very many programmers eager to contribute part-timework
   for GNU. For most projects, such part-time distributed work wouldbe
   very hard to coordinate; the independently-written parts would notwork
   together. But for the particular task of replacing Unix, thisproblem
   is absent. A complete Unix system contains hundreds of
   utilityprograms, each of which is documented separately. Most
   interfacespecifications are fixed by Unix compatibility. If each
   contributorcan write a compatible replacement for a single Unix
   utility, and makeit work properly in place of the original on a Unix
   system, then theseutilities will work right when put together. Even
   allowing for Murphyto create a few unexpected problems, assembling
   these components willbe a feasible task. (The kernel will require
   closer communication andwill be worked on by a small, tight group.)

   <p>If I get donations of money, I may be able to hire a few people fullor
   part time. The salary won't be high by programmers' standards, butI'm
   looking for people for whom building community spirit is asimportant
   as making money. I view this as a way of enabling dedicatedpeople to
   devote their full energies to working on GNU by sparing themthe need
   to make a living in another way.

  <h>Why All Computer Users Will Benefit

   <p>Once GNU is written, everyone will be able to obtain good
   systemsoftware free, just like air.(2)

   <p>This means much more than just saving everyone the price of a
   Unixlicense. It means that much wasteful duplication of system
   programmingeffort will be avoided. This effort can go instead into
   advancing thestate of the art.

   <p>Complete system sources will be available to everyone. As a result,a
   user who needs changes in the system will always be free to make
   themhimself, or hire any available programmer or company to make them
   forhim. Users will no longer be at the mercy of one programmer or
   companywhich owns the sources and is in sole position to make changes.

   <p>Schools will be able to provide a much more educational environmentby
   encouraging all students to study and improve the system
   code.Harvard's computer lab used to have the policy that no program
   could beinstalled on the system if its sources were not on public
   display, andupheld it by actually refusing to install certain
   programs. I was verymuch inspired by this.

   <p>Finally, the overhead of considering who owns the system softwareand
   what one is or is not entitled to do with it will be lifted.

   <p>Arrangements to make people pay for using a program,
   includinglicensing of copies, always incur a tremendous cost to
   society throughthe cumbersome mechanisms necessary to figure out how
   much (that is,which programs) a person must pay for. And only a police
   state canforce everyone to obey them. Consider a space station where
   air mustbe manufactured at great cost: charging each breather per
   liter of airmay be fair, but wearing the metered gas mask all day and
   all night isintolerable even if everyone can afford to pay the air
   bill. And theTV cameras everywhere to see if you ever take the mask
   off areoutrageous. It's better to support the air plant with a head
   tax andchuck the masks.

   <p>Copying all or parts of a program is as natural to a programmer
   asbreathing, and as productive. It ought to be as free.

  <h>Some Easily Rebutted Objections to GNU's Goals

   <p>"Nobody will use it if it is free, because that means they can't rely
   on any support."

   <p>"You have to charge for the program to pay for providing the support."

   <p>If people would rather pay for GNU plus service than get GNU
   freewithout service, a company to provide just service to people who
   haveobtained GNU free ought to be profitable.(3)

   <p>We must distinguish between support in the form of real
   programmingwork and mere handholding. The former is something one
   cannot rely onfrom a software vendor. If your problem is not shared by
   enoughpeople, the vendor will tell you to get lost.

   <p>If your business needs to be able to rely on support, the only wayis
   to have all the necessary sources and tools. Then you can hire
   anyavailable person to fix your problem; you are not at the mercy of
   anyindividual. With Unix, the price of sources puts this out
   ofconsideration for most businesses. With GNU this will be easy. It
   isstill possible for there to be no available competent person, but
   thisproblem cannot be blamed on distribution arrangements. GNU does
   noteliminate all the world's problems, only some of them.

   <p>Meanwhile, the users who know nothing about computers needhandholding:
   doing things for them which they could easily dothemselves but don't
   know how.

   <p>Such services could be provided by companies that sell
   justhand-holding and repair service. If it is true that users would
   ratherspend money and get a product with service, they will also be
   willingto buy the service having got the product free. The service
   companieswill compete in quality and price; users will not be tied to
   anyparticular one. Meanwhile, those of us who don't need the
   serviceshould be able to use the program without paying for the
   service.

   <p>"You cannot reach many people without advertising, and you must charge
   for the program to support that."

   <p>"It's no use advertising a program people can get free."

   <p>There are various forms of free or very cheap publicity that can
   beused to inform numbers of computer users about something like GNU.
   Butit may be true that one can reach more microcomputer users
   withadvertising. If this is really so, a business which advertises
   theservice of copying and mailing GNU for a fee ought to be
   successfulenough to pay for its advertising and more. This way, only
   the userswho benefit from the advertising pay for it.

   <p>On the other hand, if many people get GNU from their friends, andsuch
   companies don't succeed, this will show that advertising was notreally
   necessary to spread GNU. Why is it that free market advocatesdon't
   want to let the free market decide this?(4)

   <p>"My company needs a proprietary operating system to get a competitive
   edge."

   <p>GNU will remove operating system software from the realm
   ofcompetition. You will not be able to get an edge in this area,
   butneither will your competitors be able to get an edge over you. You
   andthey will compete in other areas, while benefiting mutually in
   thisone. If your business is selling an operating system, you will
   notlike GNU, but that's tough on you. If your business is something
   else,GNU can save you from being pushed into the expensive business
   ofselling operating systems.

   <p>I would like to see GNU development supported by gifts from
   manymanufacturers and users, reducing the cost to each.(5)

   <p>"Don't programmers deserve a reward for their creativity?"

   <p>If anything deserves a reward, it is social contribution.Creativity
   can be a social contribution, but only in so far as societyis free to
   use the results. If programmers deserve to be rewarded forcreating
   innovative programs, by the same token they deserve to bepunished if
   they restrict the use of these programs.

   <p>"Shouldn't a programmer be able to ask for a reward for his
   creativity?"

   <p>There is nothing wrong with wanting pay for work, or seeking
   tomaximize one's income, as long as one does not use means that
   aredestructive. But the means customary in the field of software
   todayare based on destruction.

   <p>Extracting money from users of a program by restricting their use ofit
   is destructive because the restrictions reduce the amount and theways
   that the program can be used. This reduces the amount of wealththat
   humanity derives from the program. When there is a deliberatechoice to
   restrict, the harmful consequences are deliberate destruction.

   <p>The reason a good citizen does not use such destructive means tobecome
   wealthier is that, if everyone did so, we would all becomepoorer from
   the mutual destructiveness. This is Kantian ethics; or,the Golden
   Rule. Since I do not like the consequences that result ifeveryone
   hoards information, I am required to consider it wrong for oneto do
   so. Specifically, the desire to be rewarded for one's creativitydoes
   not justify depriving the world in general of all or part of
   thatcreativity.

   <p>"Won't programmers starve?"

   <p>I could answer that nobody is forced to be a programmer. Most of
   uscannot manage to get any money for standing on the street and
   makingfaces. But we are not, as a result, condemned to spend our
   livesstanding on the street making faces, and starving. We do
   somethingelse.

   <p>But that is the wrong answer because it accepts the
   questioner'simplicit assumption: that without ownership of software,
   programmerscannot possibly be paid a cent. Supposedly it is all or
   nothing.

   <p>The real reason programmers will not starve is that it will still
   bepossible for them to get paid for programming; just not paid as much
   asnow.

   <p>Restricting copying is not the only basis for business in software.It
   is the most common basis because it brings in the most money. If
   itwere prohibited, or rejected by the customer, software business
   wouldmove to other bases of organization which are now used less
   often.There are always numerous ways to organize any kind of business.

   <p>Probably programming will not be as lucrative on the new basis as itis
   now. But that is not an argument against the change. It is
   notconsidered an injustice that sales clerks make the salaries that
   theynow do. If programmers made the same, that would not be an
   injusticeeither. (In practice they would still make considerably more
   thanthat.)

   <p>"Don't people have a right to control how their creativity is used?"

   <p>"Control over the use of one's ideas" really constitutes control
   overother people's lives; and it is usually used to make their lives
   moredifficult.

   <p>People who have studied the issue of intellectual property
   rights(6)carefully (such as lawyers) say that there is no intrinsic
   right tointellectual property. The kinds of supposed intellectual
   propertyrights that the government recognizes were created by specific
   acts oflegislation for specific purposes.

   <p>For example, the patent system was established to encourageinventors
   to disclose the details of their inventions. Its purpose wasto help
   society rather than to help inventors. At the time, the lifespan of 17
   years for a patent was short compared with the rate ofadvance of the
   state of the art. Since patents are an issue only amongmanufacturers,
   for whom the cost and effort of a license agreement aresmall compared
   with setting up production, the patents often do not domuch harm. They
   do not obstruct most individuals who use patentedproducts.

   <p>The idea of copyright did not exist in ancient times, when
   authorsfrequently copied other authors at length in works of
   non-fiction. Thispractice was useful, and is the only way many
   authors' works havesurvived even in part. The copyright system was
   created expressly forthe purpose of encouraging authorship. In the
   domain for which it wasinvented--books, which could be copied
   economically only on a printingpress--it did little harm, and did not
   obstruct most of the individualswho read the books.

   <p>All intellectual property rights are just licenses granted by
   societybecause it was thought, rightly or wrongly, that society as a
   wholewould benefit by granting them. But in any particular situation,
   wehave to ask: are we really better off granting such license? What
   kindof act are we licensing a person to do?

   <p>The case of programs today is very different from that of books
   ahundred years ago. The fact that the easiest way to copy a program
   isfrom one neighbor to another, the fact that a program has both
   sourcecode and object code which are distinct, and the fact that a
   program isused rather than read and enjoyed, combine to create a
   situation inwhich a person who enforces a copyright is harming society
   as a wholeboth materially and spiritually; in which a person should
   not do soregardless of whether the law enables him to.

   <p>"Competition makes things get done better."

   <p>The paradigm of competition is a race: by rewarding the winner,
   weencourage everyone to run faster. When capitalism really works
   thisway, it does a good job; but its defenders are wrong in assuming
   italways works this way. If the runners forget why the reward is
   offeredand become intent on winning, no matter how, they may find
   otherstrategies--such as, attacking other runners. If the runners get
   intoa fist fight, they will all finish late.

   <p>Proprietary and secret software is the moral equivalent of runnersin a
   fist fight. Sad to say, the only referee we've got does not seemto
   object to fights; he just regulates them ("For every ten yards yourun,
   you can fire one shot"). He really ought to break them up, andpenalize
   runners for even trying to fight.

   <p>"Won't everyone stop programming without a monetary incentive?"

   <p>Actually, many people will program with absolutely no
   monetaryincentive. Programming has an irresistible fascination for
   somepeople, usually the people who are best at it. There is no
   shortage ofprofessional musicians who keep at it even though they have
   no hope ofmaking a living that way.

   <p>But really this question, though commonly asked, is not appropriateto
   vthe situation. Pay for programmers will not disappear, only
   becomeless. So the right question is, will anyone program with a
   reducedmonetary incentive? My experience shows that they will.

   <p>For more than ten years, many of the world's best programmers workedat
   the Artificial Intelligence Lab for far less money than they couldhave
   had anywhere else. They got many kinds of non-monetary rewards:fame
   and appreciation, for example. And creativity is also fun, areward in
   itself.

   <p>Then most of them left when offered a chance to do the sameinteresting
   work for a lot of money.

   <p>What the facts show is that people will program for reasons otherthan
   riches; but if given a chance to make a lot of money as well, theywill
   come to expect and demand it. Low-paying organizations do poorlyin
   competition with high-paying ones, but they do not have to do badlyif
   the high-paying ones are banned.

   <p>"We need the programmers desperately. If they demand that we stop
   helping our neighbors, we have to obey."

   <p>You're never so desperate that you have to obey this sort of
   demand.Remember: millions for defense, but not a cent for tribute!

   <p>"Programmers need to make a living somehow."

   <p>In the short run, this is true. However, there are plenty of waysthat
   programmers could make a living without selling the right to use
   aprogram. This way is customary now because it brings programmers
   andbusinessmen the most money, not because it is the only way to make
   aliving. It is easy to find other ways if you want to find them.
   Hereare a number of examples.

   <p>A manufacturer introducing a new computer will pay for the porting
   ofoperating systems onto the new hardware.

   <p>The sale of teaching, hand-holding and maintenance services couldalso
   employ programmers.

   <p>People with new ideas could distribute programs asfreeware(7), asking
   fordonations from satisfied users, or selling hand-holding services.
   Ihave met people who are already working this way successfully.

   <p>Users with related needs can form users' groups, and pay dues. Agroup
   would contract with programming companies to write programs thatthe
   group's members would like to use.

   <p>All sorts of development can be funded with a Software Tax:

   <p>Suppose everyone who buys a computer has to pay x percent of the price
   as a software tax. The government gives this to an agency like the NSF
   to spend on software development.

   <p>But if the computer buyer makes a donation to software development
   himself, he can take a credit against the tax. He can donate to the
   project of his own choosing--often, chosen because he hopes to use the
   results when it is done. He can take a credit for any amount of
   donation up to the total tax he had to pay.

   <p>The total tax rate could be decided by a vote of the payers of the
   tax, weighted according to the amount they will be taxed on.

   <p>The consequences:
     <l>* The computer-using community supports software development.
     <l>* This community decides what level of support is needed.
     <l>* Users who care which projects their share is spent on can choose
       this for themselves.

   <p>In the long run, making programs free is a step toward
   thepost-scarcity world, where nobody will have to work very hard just
   tomake a living. People will be free to devote themselves to
   activitiesthat are fun, such as programming, after spending the
   necessary tenhours a week on required tasks such as legislation,
   family counseling,robot repair and asteroid prospecting. There will be
   no need to beable to make a living from programming.

   <p>We have already greatly reduced the amount of work that the
   wholesociety must do for its actual productivity, but only a little of
   thishas translated itself into leisure for workers because
   muchnonproductive activity is required to accompany productive
   activity.The main causes of this are bureaucracy and isometric
   struggles againstcompetition. Free software will greatly reduce these
   drains in thearea of software production. We must do this, in order
   for technicalgains in productivity to translate into less work for us.
     _________________________________________________________________

    <h>Footnotes

   <p>(1) The wording here was careless. Theintention was that nobody would
   have to pay for *permission* to usethe GNU system. But the words don't
   make this clear, and people ofteninterpret them as saying that copies
   of GNU should always bedistributed at little or no charge. That was
   never the intent; lateron, the manifesto mentions the possibility of
   companies providing theservice of distribution for a profit.
   Subsequently I have learned todistinguish carefully between "free" in
   the sense of freedom and"free" in the sense of price. Free software is
   software that usershave the freedom to distribute and change. Some
   users may obtaincopies at no charge, while others pay to obtain
   copies--and if thefunds help support improving the software, so much
   the better. Theimportant thing is that everyone who has a copy has the
   freedom tocooperate with others in using it.

   <p>(2) This is another place I failed todistinguish carefully between the
   two different meanings of "free".The statement as it stands is not
   false--you can get copies of GNUsoftware at no charge, from your
   friends or over the net. But it doessuggest the wrong idea.

   <p>(3) Several such companies now exist.

   <p>(4) The FreeSoftware Foundation for 10 years raised most of its funds
   from adistribution service, although it is a charity rather than a
   company.You can order things from the FSF.

   <p>(5) A group ofcomputer companies pooled funds around 1991 to support
   maintenance ofthe GNU C Compiler.

   <p>(6)In the 80s I had not yet realized how confusing it was to speak
   of"the issue" of "intellectual property". That term is
   obviouslybiased; more subtle is the fact that it lumps together
   variousdisparate laws which raise very different issues. Nowadays I
   urgepeople to reject the term "intellectual property" entirely, lest
   itlead others to suppose that those laws form one coherent issue.
   Theway to be clear is to discuss patents, copyrights, and
   trademarksseparately. See further explanation of how this term spreads
   confusion andbias.

   <p>(7)Subsequently we have learned to distinguishbetween "free software"
   and "freeware". The term "freeware" meanssoftware you are free to
   redistribute, but usually you are not free tostudy and change the
   source code, so most of it is not free software.the Confusing Words
   and Phrases page for more explanation.
     _________________________________________________________________

    
